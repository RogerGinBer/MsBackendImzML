// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// imzMLBinReadGeneric
Rcpp::NumericVector imzMLBinReadGeneric(const char* ibdFname, unsigned int NPixels, unsigned int N, uint64_t offset, Rcpp::String dataTypeString, bool read_mz, bool continuous);
RcppExport SEXP _MsBackendImzML_imzMLBinReadGeneric(SEXP ibdFnameSEXP, SEXP NPixelsSEXP, SEXP NSEXP, SEXP offsetSEXP, SEXP dataTypeStringSEXP, SEXP read_mzSEXP, SEXP continuousSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type NPixels(NPixelsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type dataTypeString(dataTypeStringSEXP);
    Rcpp::traits::input_parameter< bool >::type read_mz(read_mzSEXP);
    Rcpp::traits::input_parameter< bool >::type continuous(continuousSEXP);
    rcpp_result_gen = Rcpp::wrap(imzMLBinReadGeneric(ibdFname, NPixels, N, offset, dataTypeString, read_mz, continuous));
    return rcpp_result_gen;
END_RCPP
}
// testingimzMLBinWriteSequential
Rcpp::DataFrame testingimzMLBinWriteSequential(const char* ibdFname, Rcpp::String mz_dataTypeString, Rcpp::String int_dataTypeString, Rcpp::String str_uuid, Rcpp::NumericMatrix mzArray, Rcpp::NumericMatrix intArray);
RcppExport SEXP _MsBackendImzML_testingimzMLBinWriteSequential(SEXP ibdFnameSEXP, SEXP mz_dataTypeStringSEXP, SEXP int_dataTypeStringSEXP, SEXP str_uuidSEXP, SEXP mzArraySEXP, SEXP intArraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type mz_dataTypeString(mz_dataTypeStringSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type int_dataTypeString(int_dataTypeStringSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type str_uuid(str_uuidSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mzArray(mzArraySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type intArray(intArraySEXP);
    rcpp_result_gen = Rcpp::wrap(testingimzMLBinWriteSequential(ibdFname, mz_dataTypeString, int_dataTypeString, str_uuid, mzArray, intArray));
    return rcpp_result_gen;
END_RCPP
}
// CimzMLBinCreateNewIBD
void CimzMLBinCreateNewIBD(const char* ibdFname, Rcpp::String str_uuid);
RcppExport SEXP _MsBackendImzML_CimzMLBinCreateNewIBD(SEXP ibdFnameSEXP, SEXP str_uuidSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type str_uuid(str_uuidSEXP);
    CimzMLBinCreateNewIBD(ibdFname, str_uuid);
    return R_NilValue;
END_RCPP
}
// CimzMLBinAppendMass
uint64_t CimzMLBinAppendMass(const char* ibdFname, Rcpp::String mz_dataTypeString, Rcpp::NumericVector mzNew);
RcppExport SEXP _MsBackendImzML_CimzMLBinAppendMass(SEXP ibdFnameSEXP, SEXP mz_dataTypeStringSEXP, SEXP mzNewSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type mz_dataTypeString(mz_dataTypeStringSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzNew(mzNewSEXP);
    rcpp_result_gen = Rcpp::wrap(CimzMLBinAppendMass(ibdFname, mz_dataTypeString, mzNew));
    return rcpp_result_gen;
END_RCPP
}
// CimzMLBinAppendIntensity
uint64_t CimzMLBinAppendIntensity(const char* ibdFname, Rcpp::String int_dataTypeString, Rcpp::NumericVector intNew);
RcppExport SEXP _MsBackendImzML_CimzMLBinAppendIntensity(SEXP ibdFnameSEXP, SEXP int_dataTypeStringSEXP, SEXP intNewSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type int_dataTypeString(int_dataTypeStringSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type intNew(intNewSEXP);
    rcpp_result_gen = Rcpp::wrap(CimzMLBinAppendIntensity(ibdFname, int_dataTypeString, intNew));
    return rcpp_result_gen;
END_RCPP
}
// CimzMLBinWriteModifyMass
void CimzMLBinWriteModifyMass(const char* ibdFname, unsigned int NPixels, Rcpp::String mz_dataTypeString, Rcpp::String int_dataTypeString, bool continuous, Rcpp::NumericVector mzNew, uint64_t mzOffset);
RcppExport SEXP _MsBackendImzML_CimzMLBinWriteModifyMass(SEXP ibdFnameSEXP, SEXP NPixelsSEXP, SEXP mz_dataTypeStringSEXP, SEXP int_dataTypeStringSEXP, SEXP continuousSEXP, SEXP mzNewSEXP, SEXP mzOffsetSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type NPixels(NPixelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type mz_dataTypeString(mz_dataTypeStringSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type int_dataTypeString(int_dataTypeStringSEXP);
    Rcpp::traits::input_parameter< bool >::type continuous(continuousSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzNew(mzNewSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type mzOffset(mzOffsetSEXP);
    CimzMLBinWriteModifyMass(ibdFname, NPixels, mz_dataTypeString, int_dataTypeString, continuous, mzNew, mzOffset);
    return R_NilValue;
END_RCPP
}
// CimzMLBinReadMass
Rcpp::NumericVector CimzMLBinReadMass(const char* ibdFname, unsigned int NPixels, unsigned int N, uint64_t offset, Rcpp::String dataTypeString, bool continuous);
RcppExport SEXP _MsBackendImzML_CimzMLBinReadMass(SEXP ibdFnameSEXP, SEXP NPixelsSEXP, SEXP NSEXP, SEXP offsetSEXP, SEXP dataTypeStringSEXP, SEXP continuousSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type NPixels(NPixelsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type dataTypeString(dataTypeStringSEXP);
    Rcpp::traits::input_parameter< bool >::type continuous(continuousSEXP);
    rcpp_result_gen = Rcpp::wrap(CimzMLBinReadMass(ibdFname, NPixels, N, offset, dataTypeString, continuous));
    return rcpp_result_gen;
END_RCPP
}
// CimzMLBinReadIntensity
Rcpp::NumericVector CimzMLBinReadIntensity(const char* ibdFname, unsigned int NPixels, unsigned int N, uint64_t offset, Rcpp::String dataTypeString, bool continuous);
RcppExport SEXP _MsBackendImzML_CimzMLBinReadIntensity(SEXP ibdFnameSEXP, SEXP NPixelsSEXP, SEXP NSEXP, SEXP offsetSEXP, SEXP dataTypeStringSEXP, SEXP continuousSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type NPixels(NPixelsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type dataTypeString(dataTypeStringSEXP);
    Rcpp::traits::input_parameter< bool >::type continuous(continuousSEXP);
    rcpp_result_gen = Rcpp::wrap(CimzMLBinReadIntensity(ibdFname, NPixels, N, offset, dataTypeString, continuous));
    return rcpp_result_gen;
END_RCPP
}
// CimzMLReadPeakList
Rcpp::List CimzMLReadPeakList(const char* ibdFname, Rcpp::List imzML_peakList_descriptor, unsigned int PixelID);
RcppExport SEXP _MsBackendImzML_CimzMLReadPeakList(SEXP ibdFnameSEXP, SEXP imzML_peakList_descriptorSEXP, SEXP PixelIDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type imzML_peakList_descriptor(imzML_peakList_descriptorSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type PixelID(PixelIDSEXP);
    rcpp_result_gen = Rcpp::wrap(CimzMLReadPeakList(ibdFname, imzML_peakList_descriptor, PixelID));
    return rcpp_result_gen;
END_RCPP
}
// overwriteIbdUUid
void overwriteIbdUUid(const char* ibdFname, Rcpp::String newUUID);
RcppExport SEXP _MsBackendImzML_overwriteIbdUUid(SEXP ibdFnameSEXP, SEXP newUUIDSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type newUUID(newUUIDSEXP);
    overwriteIbdUUid(ibdFname, newUUID);
    return R_NilValue;
END_RCPP
}
// Cload_imzMLSpectra
Rcpp::NumericMatrix Cload_imzMLSpectra(Rcpp::List rMSIobj, Rcpp::IntegerVector pixelIDs, Rcpp::NumericVector commonMassAxis, unsigned int number_of_threads);
RcppExport SEXP _MsBackendImzML_Cload_imzMLSpectra(SEXP rMSIobjSEXP, SEXP pixelIDsSEXP, SEXP commonMassAxisSEXP, SEXP number_of_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type rMSIobj(rMSIobjSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type pixelIDs(pixelIDsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type commonMassAxis(commonMassAxisSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type number_of_threads(number_of_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Cload_imzMLSpectra(rMSIobj, pixelIDs, commonMassAxis, number_of_threads));
    return rcpp_result_gen;
END_RCPP
}
// CimzMLParse
List CimzMLParse(String xml_path);
RcppExport SEXP _MsBackendImzML_CimzMLParse(SEXP xml_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type xml_path(xml_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(CimzMLParse(xml_path));
    return rcpp_result_gen;
END_RCPP
}
// CimzMLStore
bool CimzMLStore(String fname, List imgInfo, const char* mass_spectrometer_file_format);
RcppExport SEXP _MsBackendImzML_CimzMLStore(SEXP fnameSEXP, SEXP imgInfoSEXP, SEXP mass_spectrometer_file_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type fname(fnameSEXP);
    Rcpp::traits::input_parameter< List >::type imgInfo(imgInfoSEXP);
    Rcpp::traits::input_parameter< const char* >::type mass_spectrometer_file_format(mass_spectrometer_file_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(CimzMLStore(fname, imgInfo, mass_spectrometer_file_format));
    return rcpp_result_gen;
END_RCPP
}
// NoiseEstimationFFTCosWin
NumericVector NoiseEstimationFFTCosWin(NumericVector x, int filWinSize);
RcppExport SEXP _MsBackendImzML_NoiseEstimationFFTCosWin(SEXP xSEXP, SEXP filWinSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type filWinSize(filWinSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(NoiseEstimationFFTCosWin(x, filWinSize));
    return rcpp_result_gen;
END_RCPP
}
// NoiseEstimationFFTExpWin
NumericVector NoiseEstimationFFTExpWin(NumericVector x, int filWinSize);
RcppExport SEXP _MsBackendImzML_NoiseEstimationFFTExpWin(SEXP xSEXP, SEXP filWinSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type filWinSize(filWinSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(NoiseEstimationFFTExpWin(x, filWinSize));
    return rcpp_result_gen;
END_RCPP
}
// NoiseEstimationFFTCosWinMat
NumericMatrix NoiseEstimationFFTCosWinMat(NumericMatrix x, int filWinSize);
RcppExport SEXP _MsBackendImzML_NoiseEstimationFFTCosWinMat(SEXP xSEXP, SEXP filWinSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type filWinSize(filWinSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(NoiseEstimationFFTCosWinMat(x, filWinSize));
    return rcpp_result_gen;
END_RCPP
}
// NoiseEstimationFFTExpWinMat
NumericMatrix NoiseEstimationFFTExpWinMat(NumericMatrix x, int filWinSize);
RcppExport SEXP _MsBackendImzML_NoiseEstimationFFTExpWinMat(SEXP xSEXP, SEXP filWinSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type filWinSize(filWinSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(NoiseEstimationFFTExpWinMat(x, filWinSize));
    return rcpp_result_gen;
END_RCPP
}
// DetectPeaks_C
NumericMatrix DetectPeaks_C(NumericVector mass, NumericVector intensity, double SNR, int WinSize, int UpSampling);
RcppExport SEXP _MsBackendImzML_DetectPeaks_C(SEXP massSEXP, SEXP intensitySEXP, SEXP SNRSEXP, SEXP WinSizeSEXP, SEXP UpSamplingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mass(massSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type intensity(intensitySEXP);
    Rcpp::traits::input_parameter< double >::type SNR(SNRSEXP);
    Rcpp::traits::input_parameter< int >::type WinSize(WinSizeSEXP);
    Rcpp::traits::input_parameter< int >::type UpSampling(UpSamplingSEXP);
    rcpp_result_gen = Rcpp::wrap(DetectPeaks_C(mass, intensity, SNR, WinSize, UpSampling));
    return rcpp_result_gen;
END_RCPP
}
// TestPeakInterpolation_C
NumericVector TestPeakInterpolation_C(NumericVector mass, NumericVector intensity, int peakIndex, int WinSize, int UpSampling, bool useHanning, int Iterations);
RcppExport SEXP _MsBackendImzML_TestPeakInterpolation_C(SEXP massSEXP, SEXP intensitySEXP, SEXP peakIndexSEXP, SEXP WinSizeSEXP, SEXP UpSamplingSEXP, SEXP useHanningSEXP, SEXP IterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mass(massSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type intensity(intensitySEXP);
    Rcpp::traits::input_parameter< int >::type peakIndex(peakIndexSEXP);
    Rcpp::traits::input_parameter< int >::type WinSize(WinSizeSEXP);
    Rcpp::traits::input_parameter< int >::type UpSampling(UpSamplingSEXP);
    Rcpp::traits::input_parameter< bool >::type useHanning(useHanningSEXP);
    Rcpp::traits::input_parameter< int >::type Iterations(IterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(TestPeakInterpolation_C(mass, intensity, peakIndex, WinSize, UpSampling, useHanning, Iterations));
    return rcpp_result_gen;
END_RCPP
}
// TestHanningWindow
NumericVector TestHanningWindow(NumericVector mass, int WinSize, int UpSampling);
RcppExport SEXP _MsBackendImzML_TestHanningWindow(SEXP massSEXP, SEXP WinSizeSEXP, SEXP UpSamplingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mass(massSEXP);
    Rcpp::traits::input_parameter< int >::type WinSize(WinSizeSEXP);
    Rcpp::traits::input_parameter< int >::type UpSampling(UpSamplingSEXP);
    rcpp_result_gen = Rcpp::wrap(TestHanningWindow(mass, WinSize, UpSampling));
    return rcpp_result_gen;
END_RCPP
}
// TestAreaWindow
NumericVector TestAreaWindow(NumericVector mass, int WinSize, int UpSampling);
RcppExport SEXP _MsBackendImzML_TestAreaWindow(SEXP massSEXP, SEXP WinSizeSEXP, SEXP UpSamplingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mass(massSEXP);
    Rcpp::traits::input_parameter< int >::type WinSize(WinSizeSEXP);
    Rcpp::traits::input_parameter< int >::type UpSampling(UpSamplingSEXP);
    rcpp_result_gen = Rcpp::wrap(TestAreaWindow(mass, WinSize, UpSampling));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MsBackendImzML_imzMLBinReadGeneric", (DL_FUNC) &_MsBackendImzML_imzMLBinReadGeneric, 7},
    {"_MsBackendImzML_testingimzMLBinWriteSequential", (DL_FUNC) &_MsBackendImzML_testingimzMLBinWriteSequential, 6},
    {"_MsBackendImzML_CimzMLBinCreateNewIBD", (DL_FUNC) &_MsBackendImzML_CimzMLBinCreateNewIBD, 2},
    {"_MsBackendImzML_CimzMLBinAppendMass", (DL_FUNC) &_MsBackendImzML_CimzMLBinAppendMass, 3},
    {"_MsBackendImzML_CimzMLBinAppendIntensity", (DL_FUNC) &_MsBackendImzML_CimzMLBinAppendIntensity, 3},
    {"_MsBackendImzML_CimzMLBinWriteModifyMass", (DL_FUNC) &_MsBackendImzML_CimzMLBinWriteModifyMass, 7},
    {"_MsBackendImzML_CimzMLBinReadMass", (DL_FUNC) &_MsBackendImzML_CimzMLBinReadMass, 6},
    {"_MsBackendImzML_CimzMLBinReadIntensity", (DL_FUNC) &_MsBackendImzML_CimzMLBinReadIntensity, 6},
    {"_MsBackendImzML_CimzMLReadPeakList", (DL_FUNC) &_MsBackendImzML_CimzMLReadPeakList, 3},
    {"_MsBackendImzML_overwriteIbdUUid", (DL_FUNC) &_MsBackendImzML_overwriteIbdUUid, 2},
    {"_MsBackendImzML_Cload_imzMLSpectra", (DL_FUNC) &_MsBackendImzML_Cload_imzMLSpectra, 4},
    {"_MsBackendImzML_CimzMLParse", (DL_FUNC) &_MsBackendImzML_CimzMLParse, 1},
    {"_MsBackendImzML_CimzMLStore", (DL_FUNC) &_MsBackendImzML_CimzMLStore, 3},
    {"_MsBackendImzML_NoiseEstimationFFTCosWin", (DL_FUNC) &_MsBackendImzML_NoiseEstimationFFTCosWin, 2},
    {"_MsBackendImzML_NoiseEstimationFFTExpWin", (DL_FUNC) &_MsBackendImzML_NoiseEstimationFFTExpWin, 2},
    {"_MsBackendImzML_NoiseEstimationFFTCosWinMat", (DL_FUNC) &_MsBackendImzML_NoiseEstimationFFTCosWinMat, 2},
    {"_MsBackendImzML_NoiseEstimationFFTExpWinMat", (DL_FUNC) &_MsBackendImzML_NoiseEstimationFFTExpWinMat, 2},
    {"_MsBackendImzML_DetectPeaks_C", (DL_FUNC) &_MsBackendImzML_DetectPeaks_C, 5},
    {"_MsBackendImzML_TestPeakInterpolation_C", (DL_FUNC) &_MsBackendImzML_TestPeakInterpolation_C, 7},
    {"_MsBackendImzML_TestHanningWindow", (DL_FUNC) &_MsBackendImzML_TestHanningWindow, 3},
    {"_MsBackendImzML_TestAreaWindow", (DL_FUNC) &_MsBackendImzML_TestAreaWindow, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_MsBackendImzML(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
